{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This document is a guide to using Git and GitHub. The aim of this guide is to provide a comprehensive introduction to basic Git and GitHub concepts and workflows. We will cover topics such as: creating a repository, pushing and pulling changes, branching, merging, and resolving merge conflicts. By the end of this guide, you should have a basic understanding of how to use Git and GitHub to collaborate with other developers.</p>"},{"location":"#intended-audience","title":"Intended Audience","text":"<p>This documentation is intended for the following users:</p> <ul> <li>Beginner developers who are new to using Git and GitHub</li> <li>Developers who would like to learn more advance techniques such as forking, and creating pull requests</li> </ul>"},{"location":"#what-is-git","title":"What is Git?","text":"<p>Git is a powerful tool used heavily throughout the software development industry. It is used to track changes in code, collaborate with other developers, and manage projects. In this guide, we will be learning how to use Git to manage our code and the basic Git workflow. </p> Basic Git workflow <p></p> <p>In Git, a common workflow involves making changes to your code, staging those changes, committing them, and then pushing those commits to a remote repository (such as GitHub). This is similar to the process of editing, saving and printing out a Word document:</p> <ol> <li> <p>Editing the document: Just like how you might edit a Word document to make changes, you can make changes to your code in a local Git repository.</p> </li> <li> <p>Saving the document: Once you're done editing, you'll want to save your Word document to ensure that your changes are stored. Similarly, in Git, you'll want to \u201cstage\u201d your changes. This corresponds with the <code>git add</code> step in the workflow.</p> </li> <li> <p>Exporting as a PDF: To ensure that your document looks the way you want it to when you print it out, you can export it as a PDF file. In Git, committing your changes is like \"exporting\" them to a permanent state in your local repository.</p> </li> <li> <p>Printing the document: Finally, to show off your work, you might choose to print out your document. In Git, \u201cpushing\u201d your committed changes to a remote repository is like \"printing out\" your code changes so that others can see and use them.</p> </li> </ol> <p>So to sum it up, just like how you would edit, save, export, and print a Word document to make changes visible, in Git, you would make changes to your code, stage them, commit them, and push them to a remote repository to make your code changes visible to others.</p>"},{"location":"#what-is-github","title":"What is GitHub?","text":"<p>GitHub is a website that allows developers to store their code in a remote repository. It is a popular platform for developers to collaborate on projects and share their code with others. GitHub is a great tool for developers to use to manage their code and collaborate with others. In this guide, we will be learning how to use GitHub to manage our code and collaborate with others.</p>"},{"location":"#software-and-prerequisites","title":"Software and Prerequisites","text":"<p>This guide was written for the Windows 10 operating system. In the specific guide, we will be using Git version 2.37.3 for Windows, and Visual Studio Code version 1.76.2. If you are using a different operating system, such as MacOS or Linus, some steps and commands in this guide may not be suitable. Specific guides for other operating systems are available online.</p> <p>Before continuing, ensure that you have the following:</p> <ul> <li>Windows 10 installed on your computer</li> <li>A GitHub account</li> <li>Git version 2.37.3</li> <li>Visual Studio Code version 1.76.2 or higher</li> </ul>"},{"location":"#registering-for-github","title":"Registering for Github","text":"<p>You can register for a github account at https://github.com/join.</p>"},{"location":"#installing-git","title":"Installing git","text":"<ol> <li>Install Git by following the specific instructions for your operating system at https://git-scm.com/book/en/v2/Getting-Started-Installing-Git.</li> <li>Navigate to the bottom left of the screen and click the search bar.</li> <li>Type cmd and press enter to open a command prompt window.     </li> <li> <p>Verify you have Git installed by running the following command <code>git -v</code>.     </p> </li> <li> <p>Your command prompt should display your current Git version if you have successfully installed git.</p> </li> </ol> <p>Tip</p> <p>If you are unsure what a command does, you can type <code>git help &lt;command&gt;</code> into the terminal to get more information about the command. For example, if you want to know what the <code>git -v</code> command does, type <code>git help -v</code> into the terminal.</p>"},{"location":"#installing-visual-studio-code","title":"Installing Visual Studio Code","text":"<p>Visual Studio Code is a free, open-source code editor that is available for Windows, MacOS, and Linux. You can download Visual Studio Code at https://code.visualstudio.com/download. Ensure that you download the correct installer for your operating system.</p>"},{"location":"#typographic-conventions","title":"Typographic Conventions","text":"<p>Throughout the document we will use several different typographic conventions to highlight important information. The following are examples of various typographic conventions used in this document.</p> <ol> <li> <p>Code blocks and inline code     Code blocks and inline code blocks are used to identify commands that should be run in the terminal. <code>git -v</code> is an example of an inline code block, while the following is an example of a code block:</p> <pre><code>git add .\ngit commit -m \"Initial commit\"\ngit push\n</code></pre> </li> <li> <p>Bold text     Bold text is used to highlight important information such as file names, and crucial steps.</p> </li> <li> <p>Quotation marks     Quotation marks are used to signify UI elements such as titles, and buttons. For example: \"Open File\"</p> </li> <li> <p>Image annotations     Aspects of each image related to the instruction will be enclosed in a red box. See the following for an example of an image for the step \"Copy the URL of the remote repository\":      </p> </li> </ol>"},{"location":"#notes-and-warning-convention","title":"Notes and Warning Convention","text":"<p>Throughout the document we will use several different conventions to highlight important information. The following conventions are ordered from most to least important.</p> <p>Danger</p> <p>This is a danger message. It is used to highlight information that is critical to the guide.</p> <p>Warning</p> <p>This is a warning message. It is used to highlight information that is important to the guide, or things for the user to look out for.</p> <p>Tip</p> <p>This is a tip message. It is used to highlight information that may help the user to complete a task.</p> <p>Info</p> <p>This is an info message. It is used to provide extra information to broaden the user's understanding.</p> <p>Success</p> <p>This is a success message. It is used to highlight that the user has successfully completed a task.</p>"},{"location":"forksAndPR/","title":"Forking a Repository","text":""},{"location":"forksAndPR/#overview","title":"Overview","text":"<p>Forking a repository is a way to make a copy of a repository in your own GitHub account. This allows you to make changes to the repository without affecting the original repository. You can then submit a pull request to the original repository to merge your changes into the original repository. This is a common workflow for open source projects. This allows the project owner to review your changes before merging them into the original repository.</p> <p>You can find more information about forking a repository on the GitHub documentation.</p>"},{"location":"forksAndPR/#how-to-fork-a-repository","title":"How to Fork a Repository","text":"<ol> <li> <p>Create a new folder on your computer to store the repository.</p> <p>To do this, open your file explorer, navigate to the directory where you want to store your project's code, right click and create a new folder for the project.  </p> </li> <li> <p>Open Visual Studio Code and open the directory of your local repository.</p> <p>You can do this by clicking on the \u201cFile\u201d menu in the top left and selecting \u201cOpen Folder\u201d.  </p> </li> <li> <p>Navigate to the directory you just created, select it and click the \u201cSelect Folder\u201d button.      </p> </li> <li> <p>Open a new terminal window in Visual Studio Code by clicking on the \u201cTerminal\u201d tab in the top menu bar and selecting \u201cNew Terminal\u201d.</p> <p>The working directory should be the directory where you want to fork the repository. We will come back to this terminal window later.  </p> <p>Tip</p> <p>Revisit Adding Files to Repository for more information on how to change your working directory.</p> <p></p> </li> <li> <p>Go on GitHub and find a repository you want to fork.      </p> </li> <li> <p>Click on the \"Fork\" button in the top right corner.</p> <p>This will create a copy of the repository in your own GitHub account.  </p> <p>Forked Repositories</p> <p>Forked repositories are a copy of the original repository. They are not linked to the original repository. This means that you can make changes to the forked repository without affecting the original repository.</p> <p></p> </li> <li> <p>Change the repository name, or description if you want to.</p> <p>This is optional, but it is a good idea to change the repository name so that you can tell it apart from the original repository.  </p> </li> <li> <p>Click on the \"Create fork\" button to finish forking the repository.      </p> </li> <li> <p>Navigate to your forked repository on GitHub by going to your GitHub profile and clicking on the repository name.      </p> </li> <li> <p>Copy the URL from the \"Code\" dropdown button on GitHub.      </p> </li> <li> <p>Go back to the terminal we set up in step 3 and run the command <code>git clone [repository URL]</code>.</p> <p>Replace the <code>[repository URL]</code> with the URL you copied in the previous step.  </p> </li> <li> <p>Change your current directory to the directory of your local repository by using the <code>cd</code> command.</p> <p>For a refresher, see the tip in step 4.  </p> </li> <li> <p>Create a new branch for your changes using the command <code>git checkout -b [branch name]</code>.</p> <p>You can name the branch whatever you want, but it is a good idea to name it something that describes the changes you are making.</p> <p>For example, if you are adding a new feature, you could name the branch \"add-feature\".  </p> <p>Success<p>You have now successfully created a forked repository and cloned it to your local machine. You can now make changes to the repository and push them to your forked repository on GitHub. This will allow you to make changes to the repository without affecting the main branch.</p> </p> </li> </ol>"},{"location":"forksAndPR/#how-to-submit-a-pull-request","title":"How to Submit a Pull Request","text":"<ol> <li> <p>Make the changes that you want to contribute to the original repository.</p> <p>Once you have made and tested your changes, stage and commit them using the <code>git add</code>, and <code>git commit</code> commands.  </p> </li> <li> <p>Push your changes to your forked repository on GitHub using the command <code>git push origin [branch name]</code>.</p> <p>Replace the <code>[branch name]</code> with the name of the branch that you created in the previous section.  </p> </li> <li> <p>Once your changes are pushed to your forked repository, go to the original repository on GitHub and click on the \"Compare &amp; pull request\" button.      </p> <p>Tip</p> <p>Make sure you are on the GitHub page for the original repository and not your forked repository.</p> <p>No Compare &amp; Pull Request button?</p> <p>If you do not see the \"Compare &amp; pull request\" button, it means that you do not have permission to create a pull request. This is because you do not have write access to the original repository. You will need to contact the owner of the original repository and ask them to give you write access.</p> <p></p> </li> <li> <p>Select the branch that you want to merge into the original repository.</p> <p>This should be the branch that you created in the previous section.  </p> <p>Pull Request GUI</p> <p>The dropdown menus on the left side of the screen allow you to select the branch of the original repository that you want to merge into. The dropdown menu on the right side of the screen allows you to select the branch that you want to merge from. This is where you select your local changes.</p> <p></p> </li> <li> <p>Review the changes that you are proposing in the pull request and make sure that everything is correct.</p> <p>Click on the \"Create pull request\" button.  </p> <p>Success<p>You have now successfully created a pull request. Creating a pull request will notify the owner of the original repository that you have submitted changes. The will be able to review and potentially merge your changes into their repository. This will notify the owner of the original repository that you have submitted changes and they will be able to review and potentially merge your changes into their repository.</p> </p> </li> </ol>"},{"location":"forksAndPR/#conclusion","title":"Conclusion","text":"<p>By the end of this section you will have successfully learned about and completed the following tasks:</p> <ul> <li> Forked a repository on GitHub</li> <li> Cloned a repository to your local machine</li> <li> Created a new branch</li> <li> Pushed your changes to your forked repository</li> <li> Created a pull request for your changes</li> </ul> <p>Congratulations! You have now completed the Forking a Repository section. This is the third and final section of this user guide. Hopefully, by now you have a better understanding of how to use Git and GitHub. If you encountered any issues, make sure to take a look at the Troubleshooting section.</p>"},{"location":"gettingStarted/","title":"Getting Started With Git and GitHub","text":""},{"location":"gettingStarted/#overview","title":"Overview","text":"<p>Git and GitHub are powerful tools used throughout the industry to manage code and collaborate with other developers. This section will cover the basics of using Git and GitHub. It will cover topics such as creating a repository, and pushing new code. By the end of this section, you should have a basic understanding of how to use Git and GitHub to collaborate with other developers.</p> <p>Prerequisites</p> <p>Before continuing with the guide, make sure you have completed the following prerequisites: <ul> <li> Windows 10 installed on your computer </li> <li> Created a github account </li> <li> Installed a working version of Git </li> <li> Installed Visual Studio Code </li> </ul></p>"},{"location":"gettingStarted/#creating-a-remote-repository","title":"Creating a Remote Repository","text":"<ol> <li> <p>First, navigate to https://github.com and log into your GitHub account.</p> <p>If you do not have an account, create a GitHub account by going to https://github.com/join.  </p> </li> <li> <p>After logging in, click on the \u201c+\u201d sign in the top right corner of the page.      </p> </li> <li> <p>Select \u201cNew repository\u201d from the dropdown menu.      </p> </li> <li> <p>On the \u201cCreate a new repository\u201d page, enter a name for your repository in the \u201cRepository name\u201d field.</p> <p>Make sure to choose a name that describes what your code does. You can also add a description if you like.  </p> </li> <li> <p>Select the repository\u2019s visibility.</p> <p>If you want your code to be public, leave the repository as public. If you want it to be private, select \u201cPrivate\u201d.  </p> <p>Info<p>Public repositories are visible to anyone on the internet. Private repositories are only visible to the owner and collaborators. If you are unsure which option to choose, select private. The visibility of your repository can be changed at any time.</p> </p> <p></p> </li> <li> <p>Check the box that says \u201cInitialize this repository with a README\u201d to create a README file in your repository that you can edit later.      </p> <p>Info<p>A README file is a text file that contains information about your project. It is always best practice to include a README file in your repository because it will help other people understand what your project is about. For more information about README files, see https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-readmes.</p> </p> <p></p> </li> <li> <p>Click the \u201cCreate repository\u201d button at the bottom of the page when you are ready to finalize the changes and create your repository.      </p> <p>Success<p>At this point, you have successfully created a new repository on GitHub. You can now continue with the guide to learn how you can create a local copy of your repository on your computer.</p> </p> <p></p> </li> </ol>"},{"location":"gettingStarted/#creating-a-local-copy-of-the-repository","title":"Creating a Local Copy of the Repository","text":"<ol> <li> <p>Use file explorer to create a folder on your computer where you want to store your repository.</p> <p>Tip<p>It is always best practice to create a new folder for each project you work on. This will keep your projects organized and make it easier to find them later.</p> </p> <p></p> </li> <li> <p>Open Visual Studio Code.      </p> </li> <li> <p>Click on the \u201cFile\u201d tab in the top left corner of the screen and select \u201cOpen Folder\u201d.      </p> </li> <li> <p>Navigate to the directory you just created, select it and click the \u201cSelect Folder\u201d button.      </p> </li> <li> <p>Open a terminal in your Visual Studio Code by clicking on the \u201cTerminal\u201d tab in the top left of the screen and select \u201cNew Terminal\u201d.</p> <p>This will create a new terminal instance in the directory you are currently in.  </p> </li> <li> <p>Navigate to the GitHub repository you created in steps 2 to 6 of the previous section.      </p> </li> <li> <p>Click on the \u201cCode\u201d button and copy the URL of the repository.      </p> </li> <li> <p>Return to the Visual Studio Code terminal, and use the <code>git clone [repository URL]</code> command to link the remote repository to your local repository.</p> <p>Replace the <code>[repository URL]</code> with the URL you copied in the previous step.  </p> <p>git clone: command not found</p> <p>If you get the error <code>git clone: command not found</code>, it means you may have not installed Git correctly. To fix this, go back to the introduction page and try installing Git again.</p> <p></p> <p>Success</p> <p>You have successfully created a local copy of the repository in your computer. After you have added a few files to your local repository, continue with the guide to learn how you can push them to a remote repository on GitHub!</p> <p></p> </li> </ol>"},{"location":"gettingStarted/#adding-files-to-the-repository","title":"Adding Files to the Repository","text":"<p>After making some changes in your local repository, you can add them to the remote repository on GitHub. To do this, you will need to follow the Git workflow. If you need a refresher on the Git workflow, you can review the Git workflow section in the introduction page. To add files to the repository, follow the steps below:</p> <p>Double Check</p> <p>Make sure that the directory displayed in the terminal is the directory of your local repository before continuing.     <ul> <li>Use the <code>pwd</code> command to see your working directory</li> <li>Navigate to the correct by using the <code>cd</code> command if the working directory is not the directory of your local repository</li> <li>Use the <code>cd ..</code> command to navigate to the parent directory of the current directory</li> </ul></p> <p>For more information on Windows command line commands, see https://www.freecodecamp.org/news/command-line-commands-cli-tutorial/.</p> <ol> <li> <p>Change your working directory to the directory of your local repository by typing <code>cd [directory name]</code> into the terminal.</p> <p>Replace the <code>[directory name]</code> with the name of the directory you created in the previous section.  </p> </li> <li> <p>Use the <code>git add</code> command to add the files to the staging area.</p> <p>If you want to add a file called <code>index.html</code>, type <code>git add index.html</code> into the terminal.</p> <p>Alternatively, you can add all the files in the directory by typing <code>git add .</code> into the terminal.  </p> <p><code>git add</code><p>This is the first step of the Git workflow. The staging area is a temporary area where you can add files before committing them to the repository. You can add as many files as you want to the staging area before committing them to the repository. For more information about the Git workflow, you can review the Git workflow section in the What is Git section.</p> </p> <p>Tip<p>If at anytime you are unsure about what files are in the staging area, you can type <code>git status</code> into the terminal. This will show you a list of all the files in the staging area.</p> </p> <p></p> </li> <li> <p>Commit the changes using the <code>git commit -m \"[Your commit message]\"</code> command. Replace the <code>[Your commit message]</code> with a message that describes the changes you made.</p> <p>For example, if you added a new file called <code>index.html</code>, you can write a commit message like \u201cAdd index.html file\u201d.  </p> <p><code>git commit</code><p>This is the second step of the Git workflow. After adding the files to the staging area, you can commit them to the repository. For more information about the Git workflow, you can review the Git workflow section in the What is Git section.</p> </p> <p>Best Practices<p>It is always best practice to add a message when committing your changes. This will help you and others understand what changes you made. It is also best to write a commit message starting with a verb in the present tense. For example, if you fixed a bug in the code, you can write a commit message like \u201cFix bug in code\u201d.</p> </p> <p></p> </li> <li> <p>Use the <code>git push</code> command in the terminal.</p> <p>This will push the changes to the remote repository on GitHub. You should see a similar output message in the terminal.  </p> <p><code>git push</code><p>This is the third step of the Git workflow. After committing the changes, you can push them to the remote repository on GitHub. For more information about the Git workflow, you can review the Git workflow section in the What is Git section.</p> </p> <p></p> <p>Congratulations!<p>You have successfully pushed your code to GitHub. You should now be able to see your code on GitHub. When you make more changes in the future, you can follow the same steps to push your code to GitHub.</p> </p> </li> </ol>"},{"location":"gettingStarted/#conclusion","title":"Conclusion","text":"<p>By the end of this section you will have successfully learned about and completed the following tasks:</p> <ul> <li> Create a remote repository on GitHub</li> <li> Create a local copy of a repository on your computer</li> <li> Add files to the repository</li> </ul> <p>Congratulations! You have successfully completed the Getting Started section. Use the following link to move onto the Pulling and Merge Conflicts section.</p>"},{"location":"glossary/","title":"Glossary","text":"Term Definition Git A version control system that allows developers to track changes to code and collaborate on projects. GitHub An online platform that hosts Git repositories, and is used for managing version control. Repository A directory or storage space where a project's files and version history are stored. Repositories can be hosted locally or remotely. Remote Repository A repository that is hosted on a remote server or platform. Local Repository A repository that is stored on a user's local machine or network. README File A text file that provides an overview of a project and its purpose. README files include high level information about the project such as installation instructions, usage examples, and project goals. Staging The process of preparing changes made to a codebase. Committing The process of saving changes made to a codebase to the version control system. Pushing The process of sending committed changes to a remote repository. Cloning The process of creating a local copy of a remote repository. Pulling The process of retrieving changes made to a remote repository and merging them with a local repository. Merging The process of combining changes made to different branches of a codebase into a single branch. Branches/Branching The process of creating a copy of a codebase within a repository. This allows users to make changes, or test features without affecting the main project Forking The process of creating a copy of a repository. Forking enables users to modify a project's codebase without affecting the original project. Pull Request The process of proposing changes to a repository to the repository owner."},{"location":"pullingAndMerge/","title":"Pulling and Resolving Merge Conflicts","text":""},{"location":"pullingAndMerge/#overview","title":"Overview","text":"<p>This guide will walk you through the process of creating a repository on GitHub and cloning it to your local machine. You will also learn how to add files to the repository you created and push them to GitHub.  Since GitHub is a collaborative platform, others can contribute to a repository as well. You may find that the copy of the repository on your computer is different from what is on GitHub. Therefore, it is important to know how to pull changes from a remote repository and resolve merge conflicts. This guide will walk you through the process of pulling changes from a remote repository and resolving merge conflicts.</p>"},{"location":"pullingAndMerge/#pulling-from-a-remote-repository","title":"Pulling from a remote repository","text":"<ol> <li> <p>Open Visual Studio Code and open the directory of your local repository.</p> <p>You can do this by clicking on the \u201cFile\u201d menu in the top left and selecting \u201cOpen Folder\u201d.  </p> </li> <li> <p>Open a terminal instance by clicking on the \u201cTerminal\u201d tab in the top left and selecting \u201cNew Terminal\u201d.</p> <p>Ensure that the working directory is the directory of your local repository.  </p> <p>Tip</p> <p>Revisit Adding Files to Repository for more information on how to change your working directory.</p> <p></p> </li> <li> <p>Input the following commands into the terminal to check the status of your local repository:</p> <pre><code>git remote update\ngit status\n</code></pre> <p>If you do have uncommitted changes, you will need to commit them before you can pull any changes from GitHub. Please refer to the Getting Started page for instructions on committing changes. If you do not have any uncommitted changes or have committed your changes, you can proceed to the next step.  </p> <p><code>git remote update</code> and <code>git status</code></p> <p>The <code>git remote update</code> command will update the local repository with the latest changes from GitHub. The <code>git status</code> command will check the status of your local repository. This will show you if you have any uncommitted changes.</p> <p></p> </li> <li> <p>Use the <code>git pull</code> command to pull any changes made to the repository.      </p> <p>This will update your local repository with the latest changes from GitHub. You should see a description of the changes that were pulled from GitHub.</p> <p>Merge conflicts<p>If you receive a message that says <code>Automatic merge failed; fix conflicts and then commit the result</code>, this means that there are merge conflicts in your local repository. You will need to resolve the merge conflicts before you can push your changes to GitHub. Please refer to the Resolving merge conflicts section for instructions on resolving merge conflicts.</p> </p> <p></p> </li> <li> <p>If you receive additional error messages, please refer to the Troubleshooting page for help.      </p> <p>Success</p> <p>You have successfully pulled changes from a remote repository! You can now see your changes on your local repository.</p> <p></p> </li> </ol>"},{"location":"pullingAndMerge/#resolving-merge-conflicts","title":"Resolving merge conflicts","text":"<p>When working as a team, it is possible that you and your team members will make changes to the same file. When this happens, Git will not be able to automatically merge the changes. Instead, Git will mark the file as having a merge conflict. You will need to resolve the merge conflict before you can push your changes to GitHub. Merge conflicts might seem daunting the first time you encounter them, but this guide will walk you through the process of resolving merge conflicts using Visual Studio Code.</p> <ol> <li> <p>Identify the file(s) with conflicts by looking at the output of the <code>git pull</code> command. The file(s) with conflicts will be listed in the output.</p> <p>For example, the image below shows that the file <code>file1.html</code> has conflicts.  </p> </li> <li> <p>Open the file(s) with conflicts in Visual Studio Code and look for the conflict markers which look like <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>.</p> <p>Below is an example of what you might see in a file with conflicts.  </p> <p>These markers indicate where the changes from both sides of the conflict begin and end.</p> <ul> <li> <p>The <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> marker indicates the beginning of your changes.</p> </li> <li> <p>The <code>=======</code> marker indicates the end of the changes from your local repository and mark the start of the changes from the remote repository.</p> </li> <li> <p>The <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> marker indicates the end of the changes from the remote repository.    </p> </li> </ul> </li> <li> <p>Edit the file to resolve the conflict.</p> <p>You can choose to keep the changes from your local repository, the changes from the remote repository, or a combination of both. Once you have resolved the conflict, remove the conflict markers and save the file</p> <p>Below is an example of what the file might look like after resolving the conflict.  </p> </li> <li> <p>After resolving all conflicts, add the changes to the staging area using the <code>git add</code> command.</p> <p>For example, using the command <code>git add file1.html</code> will add a file called <code>file.html</code> to the staging area.  </p> </li> <li> <p>Use the <code>git commit</code> command to commit the changes with a message describing the conflict resolution.</p> <p>For example, type <code>git commit -m \"Resolve merge conflicts with file1.html\"</code>.  </p> </li> <li> <p>Finally, use the <code>git push</code> command to push your changes back to GitHub.      </p> <p>Congratulations!</p> <p>You have successfully solved your first merge conflict! You can now see your changes on GitHub.</p> </li> </ol>"},{"location":"pullingAndMerge/#conclusion","title":"Conclusion","text":"<p>By the end of this section you will have successfully learned about and completed the following tasks:</p> <ul> <li> pull changes from a remote repository on GitHub</li> <li> resolve merge conflicts</li> </ul> <p>Congratulations! You have successfully completed the Pulling and Resolving Merge Conflicts section of this user guide! Use the following link to move onto the Forking a Repository section.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"Category Symptoms Probable Cause Action Error message <code>fatal: not a git repository (or any of the parent directories): .git</code> You are not in the directory of your local repository Set your terminals working directory to the directory of your local repository Error message <code>bash: git: command not found</code> Git is not installed. Install Git via the instructions provided at https://git-scm.com/book/en/v2/Getting-Started-Installing-Git Error message <code>error: failed to push some refs to 'remote'</code> Your local repository has changes that conflict with the changes in the remote repository. Pull the latest changes from the remote repository using git pull and resolve any merge conflicts before pushing again. You do not have permission to push to the remote repository. Request permission from the repository owner Error message <code>error: Your local changes to the following files would be overwritten by merge</code> Your local changes do not match the changes in the branch you are trying to merge into. Commit your changes then try to merge again. Error message <code>error: failed to clone some repository</code> You do not have permission to access the remote repository or it is unavailable. Make sure the repository URL you copied is correct, and check that you have permission to access the repository. Repository Syncing Local repository says up to date, but new files have been added to GitHub The local repository is not properly synced with the remote repository. Use <code>git fetch</code> to update the local repository with changes in the remote repository. Then use <code>git pull</code> to pull new changes into your local repository Changes were made to a different branch than the one you are currently on. Use the git branch command to check if the changes were made in a different branch. If so, switch to that branch using the git checkout command and merge the changes into the current branch using the git merge command. Git Misuse Committed the wrong files to your Git repository  \u2014 \u2014 \u2014  Use the command <code>git reset</code> to undo the last commit."}]}